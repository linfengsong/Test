SET ScriptPath=%~dp0
set ScriptPath=%~dp0
set ScriptPath=%ScriptPath:~0,-1%

pushd %ScriptPath%\..\..
set orgSrcDir=%CD%
popd

set tmpDir=%UserProfile%\tmp\example
set workspaceDir=%tmpDir%\compose

call %ScriptPath%\initBuild "%orgSrcDir%" "%workspaceDir%"

set exampleIniFile=%srcDir%\conf\service_desktop.ini
set exampleEnvConfigFile=%workingDir%\docker-compose.env

copy %srcDir%\services\docker-compose.env.template %workingDir%
copy %srcDir%\services\docker-compose.yaml.template %workingDir%

powershell -executionpolicy remotesigned -File %ScriptPath%\UtilToken.ps1 %exampleIniFile% container %workingDir%\docker-compose.env.template true
powershell -executionpolicy remotesigned -File %ScriptPath%\UtilToken.ps1 %exampleIniFile% env %workingDir%\docker-compose.yaml.template true

set webhostui_secret=webhostui
set httpspwd=changeit
call %ScriptPath%\HttpsStore.bat %httpspwd% %workingDir%

for /f "delims=" %%x in (%workingDir%\keystore.b64) do set keystore=%%x
for /f "delims=" %%x in (%workingDir%\truststore.b64) do set truststore=%%x

type %exampleEnvConfigFile%

echo webhostui_secret="%webhostui_secret%">> %exampleEnvConfigFile%
echo HTTPS_PWD="%httpspwd%">> %exampleEnvConfigFile%
echo HTTPS_KEY_B64="%keystore%">> %exampleEnvConfigFile%
echo HTTPS_TRUST_B64="%truststore%">> %exampleEnvConfigFile%
echo BAM_AGENT_KEY="bam_agent_dummy_key">> %exampleEnvConfigFile%
  
pushd %workingDir%

docker ps|findstr example > NUL
if %errorlevel% EQU 0 (
  docker stop example
  docker rm example
)
docker compose --project-name example rm -fs
docker volume rm example_example_crypt example_example_conf example_example_logs example_example_data
 
docker compose --project-name example  build
if %errorlevel% EQU 0 (
  echo "example build success"
  
  echo "example is running"
  START /B docker compose --project-name example --env-file %exampleEnvConfigFile% up
)

popd
set ScriptPath=%~dp0
set ScriptPath=%ScriptPath:~0,-1%

pushd %ScriptPath%\..\..
set orgSrcDir=%CD%
popd

set tmpDir=%UserProfile%\tmp\example
set workspaceDir=%tmpDir%\image

call %ScriptPath%\initBuild "%orgSrcDir%" "%workspaceDir%"

call %ScriptPath%\compileScala.bat "%tmpDir%" "%srcDir%"

call %ScriptPath%\imagePrepare.bat "%srcDir%" "%workingDir%" false

call :build_image image_both args_both "%workingDir%\sh"

if exist %workingDir% (
  rmdir %workingDir% /s /q
)

call %ScriptPath%\imagePrepare.bat "%srcDir%" "%workingDir%" true

call :build_image image_sh args_sh "%workingDir%\sh"
call :build_image image_qa args_qa "%workingDir%\qa"

exit /b 0

:build_image
set image_section=%1
set args_section=%2
set buildPath=%~3

copy %buildPath%\desktop.template %workingDir%\desktop.tmp.template
call powershell -executionpolicy remotesigned -File %ScriptPath%\UtilToken.ps1 %srcDir%\conf\image_desktop.ini %args_section% %workingDir%\desktop.tmp.template false
call powershell -executionpolicy remotesigned -File %ScriptPath%\UtilToken.ps1 %srcDir%\conf\image_desktop.ini %image_section% %workingDir%\desktop.tmp.template true

SETLOCAL EnableDelayedExpansion
set parameters=
for /f "Tokens=* Delims=" %%x in (%workingDir%\desktop.tmp) do set parameters=!parameters! %%x
echo docker build --rm !parameters! "!buildPath!"
docker build --rm !parameters! "!buildPath!"
endlocal

del %workingDir%\desktop.tmp
exit /b 0
set prepareSrcDir=%~1
set prepareWorkingDir=%~2
set withQA=%3

echo prepareSrcDir=%prepareSrcDir%
echo prepareWorkingDir=%prepareWorkingDir%
echo withQA=%withQA%

echo "SH Build"
set prepareBuildDir=%prepareWorkingDir%\sh
set prepareImageDir=%prepareBuildDir%\image

mkdir %prepareImageDir%\script

mkdir %prepareImageDir%\example\conf
mkdir %prepareImageDir%\example\crypt
mkdir %prepareImageDir%\example\script
mkdir %prepareImageDir%\example\lib

copy %prepareSrcDir%\scripts\jenkins\utilToken.sh %prepareImageDir%\script

copy %prepareSrcDir%\scripts\image\*.sh %prepareImageDir%\script
  
copy %prepareSrcDir%\crypt\* %prepareImageDir%\example\crypt
copy %prepareSrcDir%\target\pack\lib\* %prepareImageDir%\example\lib

if "%withQA%" == "true" (
  copy %prepareSrcDir%\images\sh\Dockerfile %prepareBuildDir%
  copy %prepareSrcDir%\images\desktop.template %prepareBuildDir%
  

) else (
  copy %prepareSrcDir%\images\both\Dockerfile %prepareBuildDir%
  copy %prepareSrcDir%\images\desktop.template %prepareBuildDir%
)

echo prepare SH output:
echo %prepareBuildDir%:
dir %prepareBuildDir%
echo %prepareImageDir%:
dir %prepareImageDir%
echo %prepareImageDir%\script:
dir %prepareImageDir%\script
echo %prepareImageDir%\example\conf:
dir %prepareImageDir%\example\conf
echo %prepareImageDir%\example\crypt:
dir %prepareImageDir%\example\crypt
echo %prepareImageDir%\example\script:
dir %prepareImageDir%\example\script
echo %prepareImageDir%\example\lib:
dir %prepareImageDir%\example\lib


if "%withQA%" == "false" ( GOTO:eof )
  
  echo "QA build"
  
  set prepareBuildDir=%prepareWorkingDir%\qa
  set prepareImageDir=%prepareBuildDir%\image
  
  mkdir %prepareImageDir%\script
  mkdir %prepareImageDir%\example\script
  mkdir %prepareImageDir%\example\conf
  mkdir %prepareImageDir%\example\test
  
  copy %prepareSrcDir%\scripts\jenkins\utilToken.sh %prepareImageDir%\script
  
  
  copy %prepareSrcDir%\images\qa\Dockerfile %prepareBuildDir%
  copy %prepareSrcDir%\images\desktop.template %prepareBuildDir%

  echo prepare QA output
  echo %prepareBuildDir%:
  dir %prepareBuildDir%
  echo %prepareImageDir%:
  dir %prepareImageDir%
  echo %prepareImageDir%\script:
  dir %prepareImageDir%\script
  echo %prepareImageDir%\example\script:
  dir %prepareImageDir%\example\script
  echo %prepareImageDir%\example\conf:
  dir %prepareImageDir%\example\conf
  echo %prepareImageDir%\example\test:
  dir %prepareImageDir%\example\test
  
SET ScriptPath=%~dp0
SET ScriptPath=%ScriptPath:~0,-1%

set httpspwd=%1
set storePath=%2
set host=%3

pushd %ScriptPath%\..\..
SET srcDir=%CD%
popd

keytool -genkey -keyalg RSA -alias selfsigned -keystore %storePath%\keystore.jks -validity 365 -keysize 2048 -dname "CN=%host%" -keypass %httpspwd% -storepass %httpspwd%
keytool -export -alias selfsigned -file %storePath%\host.cer -keystore %storePath%\keystore.jks -keypass %httpspwd% -storepass %httpspwd%
keytool -import -v -trustcacerts -noprompt -alias selfsigned -file %storePath%\host.cer -keystore %storePath%\truststore.jks -keypass %httpspwd% -storepass %httpspwd%

certutil -encodehex -f %storePath%\keystore.jks %storePath%\keystore.b64 0x1
certutil -encodehex -f %storePath%\truststore.jks %storePath%\truststore.b64 0x1

REM del %storePath%\host.cer
REM del %storePath%\keystore.jks
REM del %storePath%\truststore.jks
  
setlocal enableDelayedExpansion
set keystore=
set truststore=
for /F "tokens=*" %%x in (!storePath!\keystore.b64) do set keystore=!keystore!%%x
  
if EXIST !srcDir!\conf\truststore_dev.b64 (
  for /F "tokens=*" %%x in (!srcDir!\build\truststore_dev.b64) do set truststore=!truststore!%%x
) else (
  for /F "tokens=*" %%x in (!storePath!\truststore.b64) do set truststore=!truststore!%%x
)

echo !keystore!> !storePath!\keystore.b64
echo !truststore!> !storePath!\truststore.b64
endlocal
@echo off

set sbtParentDir=%~1
set compileSrcDir=%~2

if not exist %sbtParentDir%\sbt\bin\sbt (
  powershell -Command "(New-Object Net.WebClient).DownloadFile('https://github.com/sbt/sbt/releases/download/v1.9.8/sbt-1.9.8.zip', '%sbtParentDir%\sbt-1.9.8.zip')"
  powershell -command "Expand-Archive -Force '%sbtParentDir%\sbt-1.9.8.zip' '%sbtParentDir%'"
) 
pushd %compileSrcDir%
call %sbtParentDir%\sbt\bin\sbt -Dsbt.override.build.repos=true -Dsbt.repository.config="%buildDir%\repositories" compile pack
popd


set prepareSrcDir=%~1
set prepareWorkingDir=%~2
set withQA=%3

echo prepareSrcDir=%prepareSrcDir%
echo prepareWorkingDir=%prepareWorkingDir%
echo withQA=%withQA%

echo "SH Build"
set prepareBuildDir=%prepareWorkingDir%\sh
set prepareImageDir=%prepareBuildDir%\image

mkdir %prepareImageDir%\script

mkdir %prepareImageDir%\example\conf
mkdir %prepareImageDir%\example\crypt
mkdir %prepareImageDir%\example\script
mkdir %prepareImageDir%\example\lib

copy %prepareSrcDir%\scripts\jenkins\utilToken.sh %prepareImageDir%\script

copy %prepareSrcDir%\scripts\image\*.sh %prepareImageDir%\script

  
copy %prepareSrcDir%\crypt\* %prepareImageDir%\example\crypt
copy %prepareSrcDir%\target\pack\lib\* %prepareImageDir%\example\lib

if "%withQA%" == "true" (
  copy %prepareSrcDir%\images\sh\Dockerfile %prepareBuildDir%
  copy %prepareSrcDir%\images\desktop.template %prepareBuildDir%
  
) else (
  copy %prepareSrcDir%\images\both\Dockerfile %prepareBuildDir%
  copy %prepareSrcDir%\images\desktop.template %prepareBuildDir%
)

echo prepare SH output:
echo %prepareBuildDir%:
dir %prepareBuildDir%
echo %prepareImageDir%:
dir %prepareImageDir%
echo %prepareImageDir%\script:
dir %prepareImageDir%\script
echo %prepareImageDir%\example\conf:
dir %prepareImageDir%\example\conf
echo %prepareImageDir%\example\crypt:
dir %prepareImageDir%\example\crypt
echo %prepareImageDir%\example\script:
dir %prepareImageDir%\example\script
echo %prepareImageDir%\example\lib:
dir %prepareImageDir%\example\lib


if "%withQA%" == "false" ( GOTO:eof )
  
  echo "QA build"
  
  set prepareBuildDir=%prepareWorkingDir%\qa
  set prepareImageDir=%prepareBuildDir%\image
  
  mkdir %prepareImageDir%\script
  mkdir %prepareImageDir%\example\script
  mkdir %prepareImageDir%\example\conf
  mkdir %prepareImageDir%\example\test
  
  copy %prepareSrcDir%\scripts\jenkins\utilToken.sh %prepareImageDir%\script
  
  
  copy %prepareSrcDir%\images\qa\Dockerfile %prepareBuildDir%
  copy %prepareSrcDir%\images\desktop.template %prepareBuildDir%

  echo prepare QA output
  echo %prepareBuildDir%:
  dir %prepareBuildDir%
  echo %prepareImageDir%:
  dir %prepareImageDir%
  echo %prepareImageDir%\script:
  dir %prepareImageDir%\script
  echo %prepareImageDir%\example\script:
  dir %prepareImageDir%\example\script
  echo %prepareImageDir%\example\conf:
  dir %prepareImageDir%\example\conf
  echo %prepareImageDir%\example\test:
  dir %prepareImageDir%\example\test
  
@echo off
set orgSrcDir=%~1
set workspaceDir=%~2

if exist %workspaceDir% (
  rmdir %workspaceDir% /s /q
)

set srcDir=%workspaceDir%\src
set workingDir=%workspaceDir%\working

echo srcDir=%srcDir%
echo workingDir=%workingDir%

mkdir %srcDir%
mkdir %workingDir%

call :copy_dir "%orgSrcDir%\conf" "%srcDir%\conf"
call :copy_dir "%orgSrcDir%\crypt" "%srcDir%\crypt"
call :copy_dir "%orgSrcDir%\images" "%srcDir%\images"
call :copy_dir "%orgSrcDir%\services" "%srcDir%\services"
call :copy_dir "%orgSrcDir%\scripts" "%srcDir%\scripts"
call :copy_dir "%orgSrcDir%\src" "%srcDir%\src"

mkdir "%srcDir%\project\project"
xcopy "%orgSrcDir%\project\*" "%srcDir%\project\"
xcopy "%orgSrcDir%\project\project\*" "%srcDir%\project\project\"
xcopy "%orgSrcDir%\Jenkinsfile" "%srcDir%\"

call :dos2unix_dir "%srcDir%\scripts"
call :dos2unix_dir "%srcDir%\conf"
call :dos2unix_dir "%srcDir%\images"
call :dos2unix_dir "%srcDir%\services"

exit /b 0

:copy_dir
set "copy_dir_src=%~1"
set "copy_dir_target=%~2"
mkdir %copy_dir_target%
xcopy "%copy_dir_src%\*" "%copy_dir_target%\" /S
exit /b 0

:dos2unix
set "dos2unix_file=%~1"
set dos2unix_file_ext=%dos2unix_file:~-4%
if "%dos2unix_file_ext%" == ".bat" (exit /b 0)
echo "dos2unix %dos2unix_file%"
powershell -Command "(Get-Content -Raw %dos2unix_file%) -replace \"`r`n\",\"`n\" | Set-Content %dos2unix_file% -NoNewline"
exit /b 0

:dos2unix_dir
set "dos2unix_path=%~1"
if exist %dos2unix_path%\* (
  for /f "tokens=*" %%f in ('dir /b /s "%dos2unix_path%\*"') do (
    call :dos2unix_dir "%%f"
  )
) else if exist %dos2unix_path% (
  call :dos2unix "%dos2unix_path%"
)
exit /b 0

param ($tokenfile, 
       $sectionName,
       $working_path,
       $rename)
       
Write-Output "tokenfile: $tokenfile"
Write-Output "sectionName: $sectionName"
Write-Output "working_path: $working_path"
Write-Output "rename: $rename"

function readIniFile {
  param (
    $path,
    $sectionName
  )

  $inSection = "false"
  $content = get-content $path
  $props=@{}
  foreach ($line in $content) {
    if ($line[0] -eq "#") {
    } elseif ($line[0] -eq "[") {
       $segment = $line.replace("[","").replace("]","")
       if ($segment -eq $sectionName) {
         $inSection = "true"
       } else {
         $inSection = "false"
       }
    } elseif ($inSection -eq "false") {
    } elseif ($line -like "*=*") {
      $key,$value = $line -split "=",2
      $props["$key"]= "$value"
    }
  }
  $props
}
  
function replaceToken {
  param (
    $path,
    $tokenName,
    $tokenValue
  )
  
  $tokenKey = (-join('%\[', $tokenName, '\]%'))
  (Get-Content $path) | Foreach-Object {
     $_ -replace $tokenKey, $tokenValue
  } | Out-File -Encoding "UTF8" $path
}

function replaceTokens {
  param (
    $tokenProps, 
    $path
  )
  
  $outputPath = (-join($path, ".tmp"))
  if (Test-Path -Path $outputPath) {
    Remove-Item -Path $outputPath
  }
  Copy-Item $path -Destination $outputPath  
  
  foreach ($key in $tokenProps.Keys) {
    $value = $($tokenProps[$key])
    Write-Output "replace replaceTokens: $key, $value"
    replaceToken $outputPath $key $value
  }

  Copy-Item $outputPath -Destination $path
  Remove-Item -Path $outputPath
}

function replaceTokenBlock {
  param (
    $tokenProps, 
    $path
  )
  
  $outputPath = (-join($path, ".tmp"))
  if (Test-Path -Path $outputPath) {
    Remove-Item -Path $outputPath
  }
  
  $inBlock = "false"
  $block = ""
  foreach($line in Get-Content $path) {
    if ($line -eq "%%[END]%%") {
      Write-Output $block
      foreach ($key in $tokenProps.Keys) {
        $value = $($tokenProps[$key])
        $curr = $block.replace("%[NAME]%", $key)
        $curr = $curr.replace("%[VALUE]%", $value)
        $curr | Out-File -FilePath $outputPath -Append
      }
      $inBlock = "false"
    } elseif ($inBlock -eq "true") {
        if ($block -ne "") {
          $block = $block + "`r`n"
        }
        $block = $block + $line
        
    } elseif ($line -eq "%%[START]%%") {
      $inBlock = "true"
    } else {
      $line | Out-File -FilePath $outputPath -Append
    }
  }
  
  Copy-Item $outputPath -Destination $path
  Remove-Item -Path $outputPath
}

function replaceTokenFile {
  param (
    $tokenProps, 
    $path
  )
  Write-Output "Token File replace: $path"
  
  replaceTokenBlock $tokenProps $path
  replaceTokens $tokenProps $path
}


$tokenProps = (readIniFile $tokenfile $sectionName)
    
if (Test-Path -Path $working_path) {
  get-childitem $working_path -recurse | where {$_.extension -eq ".template"} | % {
    replaceTokenFile $tokenProps $_.FullName
    (Get-Content -Raw $_.FullName) -replace "`r`n","`n" | Set-Content $_.FullName -NoNewline
    if ($rename -eq "true") {
      $npath = (-join($_.DirectoryName, "\", $_.Basename))
      Move-Item -Path $_.FullName -Destination $npath -Force
    }
  } 
} else {
  Write-Output "working_path: $working_path does not exist"
}
#!/bin/bash

renameTemplateFile()
{
  local filePath=$1
  local renameFile=$2
  if [[ "$renameFile" == "true" ]]; then
    local f=${filePath::-9}
    echo "mv $filePath $f"
    mv $filePath $f
  fi
}

replaceToken()
{
  local filePath=$1
  local tokenName="$2"
  local invisibleTokenValue="$3"
  eval "local tokenValue=\${${tokenName}}"
  local displayTokenValue=$tokenValue
  if [[ "$invisibleTokenValue" == "true" ]]; then
    displayTokenValue="value lenght:${#tokenValue}"
  fi
  echo sed -i "s|\%\[${tokenName}\]\%|$displayTokenValue|g" $filePath
  sed -i "s|\%\[${tokenName}\]\%|$tokenValue|g" $filePath
}

replaceTokens()
{
  local filePath=$1
  local renameFile=$2
  local invisibleTokenValue="$3"
  
  echo "replaceTokens $filePath $renameFile $invisibleTokenValue"
  for i in "${arrayTokenNames[@]}"
  do
    replaceToken $filePath $i $invisibleTokenValue
  done
  renameTemplateFile $filePath $renameFile
}

replaceBlock()
{
  local filePath=$1
  local renameFile=$2
  local invisibleTokenValue="$3"
  
  hasBlock=$(cat $filePath|grep '%%\[START\]%%')
  if [[ -z "$hasBlock" ]]; then
    renameTemplateFile $filePath $renameFile
    return
  fi
  
  echo "replaceBlock $filePath $renameFile $invisibleTokenValue"
  inBlock=false
  block=
  rfilePath="${filePath}.tmp"
  if [[ -f "${rfilePath}" ]]; then
    rm "${rfilePath}"
  fi
  while IFS= read line
  do
    tline=$(echo $line| tr -d ' ')
    if [[ "$tline" == "%%[START]%%" ]]; then
      inBlock=true
      block=
    elif [[ "$tline" == "%%[END]%%" ]]; then
      inBlock=false
      for tokenName in "${arrayTokenNames[@]}"
      do
        eval "local tokenValue=\${${tokenName}}"
        local displayTokenValue=$tokenValue
        if [[ "$invisibleTokenValue" == "true" ]]; then
          displayTokenValue="value lenght:${#tokenValue}"
        fi
        echo sed -e "s|\%\[NAME\]\%|$tokenName|g"|sed -e "s|\%\[VALUE\]\%|$displayTokenValue|g"
        echo "$block"|sed -e "s|\%\[NAME\]\%|$tokenName|g"|sed -e "s|\%\[VALUE\]\%|$tokenValue|g">>"${rfilePath}"
      done
    elif [[ "$inBlock" == "true" ]]; then
      if [[ -z "$block" ]]; then
        block="$line"
      else
        block="${block}\n${line}"
      fi
    else
      echo "$line">>"${rfilePath}"
    fi
  done < <(grep "" "$filePath")
  rm "$filePath" 
  mv "${rfilePath}" "$filePath"
  renameTemplateFile $filePath $renameFile
}

replaceTemplateTokens()
{
  local path=$1
  local renameFile=$2
  local invisibleTokenValue="$3"
  if [[ -d $path ]]; then
    for f in $(find $path -name '*.template'); do
      replaceTemplateTokens $f $renameFile $invisibleTokenValue
    done
  elif [[ $path==*.template ]]; then
    echo "replaceTemplateTokens replace: $path"
    replaceBlock $path false $invisibleTokenValue
    replaceTokens $path $renameFile $invisibleTokenValue
  fi
}

setTokens()
{
  local tokenNames=$1
  local tokenSecretNames=$2
  arrayTokenNames=(${tokenNames//,/ })

  for i in "${arrayTokenNames[@]}"
  do
    eval "local tokenValue=\${${i}}"
    echo $i=$tokenValue
  done
  
  if [[ ! -z $tokenSecretNames ]]; then
    arrayTokenSecretNames=(${tokenSecretNames//,/ })
    for i in "${arrayTokenSecretNames[@]}"
    do
	  arrayTokenNames+=($i)
      eval "local tokenValue=\${${i}}"
	  if [[ -z $tokenValue ]]; then
        echo $i=[length: 0]
	  else
	    echo $i=[length: ${#tokenValue}]
	  fi
    done  
  fi
}

readTokens() {
  local path=$1
  arrayTokenNames=()
  while IFS='=' read -r key value
  do
    if [[ ! -z ${key} ]]; then
      key="$(echo ${key}|sed -e 's/^[[:space:]]*//')"
      value="$(echo ${value}|sed -e 's/^[[:space:]]*//')"
      value=${value/\$/\\$}
      eval ${key}=\'${value}\'
      arrayTokenNames+=(${key})
    fi 
  done < <(grep "" $path)
}

createTokenFile() {
  local section=$1
  local path=$2
  local output_path=$3
  echo createTokenFile $section "${path}" "${output_path}" 
  if [[ -f "${output_path}" ]]; then
    rm "${output_path}"
  fi
  bInsection=false
  while read -r line
  do
    line=$(echo $line| tr -d ' ')
    if [[ -z $line ]]; then
      line=$line
    elif [[ "${line:0:1}" == "#" ]]; then
      line=$line
    elif [[ "${line:0:1}" == "[" ]]; then
      if [[ "[$section]" == "$line" ]]; then
        bInsection=true
      else
        bInsection=false
      fi
    elif [[ "$bInsection" == "true" ]]; then
      echo $line>>"${output_path}"
    fi
  done < <(grep "" $path)
}

readIniFile() {
  local section="$1"
  local path="$2"
  local output_path="${path}.tmp"
  createTokenFile $section "$path" "$output_path"
  
  if [[ -f "$output_path" ]]; then
    readTokens "$output_path"
    rm "$output_path"
  fi
}

readIniFile env ../../conf/service_dev.ini
cp ../../services/docker-compose.yaml.template . 
replaceTemplateTokens ./docker-compose.yaml.template true

for key in "${arrayTokenNames[@]}"
do
  value=$(eval echo \$${key})
  echo "Value for arrayTokenNames is key: $key, value: $value"
done

cat ./docker-compose.yaml
rm ./docker-compose.yaml
